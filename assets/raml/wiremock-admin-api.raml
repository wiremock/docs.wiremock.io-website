#%RAML 0.8
---
title: WireMock
version: 2.11.0
mediaType: application/json

documentation:
  - title: WireMock admin
    content: |
       The WireMock admin API.


schemas:
  - stubMapping: !include schemas/stub-mapping.schema.json
  - stubMappings: !include schemas/stub-mappings.schema.json
  - requestPattern: !include schemas/request-pattern.schema.json
  - recordSpec: !include schemas/record-spec.schema.json
  - scenarios: !include schemas/scenarios.schema.json

/__admin/mappings:
  description: Stub mappings

  get:
    description: Get all stub mappings

    queryParameters:
      limit:
        displayName: Query limit
        type: number
        description: The maximum number of results to return
        example: 10
        required: false
      offset:
        displayName: Query offset
        type: number
        description: The start index of the results to return
        example: 25
        required: false

    responses:
      200:
        description: All stub mappings
        body:
          application/json:
            schema: stubMappings
            example: !include examples/stub-mappings.example.json

  post:
    description: Create a new stub mapping
    body:
      application/json:
        example: !include examples/stub-mapping-no-id.example.json
        schema: stubMapping


    responses:
      201:
        description: Successfully created
        body:
          application/json:
            example: !include examples/stub-mapping-with-id.example.json
            schema: stubMapping

  delete:
    description: Delete all stub mappings
    responses:
      200:
        description: Successfully deleted
        body:
          application/json:
            example: !include examples/empty.example.json

  /reset:
      description: Stub mappings
      post:
        description: Reset stub mappings (restore to defaults defined back the backing store)
        responses:
          200:
            description: Successfully reset


  /{stubMappingId}:
    description: Single stub mapping
    get:
      description: Get a single stub mapping
      responses:
        200:
          body:
            application/json:
              example: !include examples/stub-mapping-with-id.example.json
              schema: stubMapping


    uriParameters:
      stubMappingId:
        required: true
        example: 730d3e32-d098-4169-a20c-554c3bedce58
        displayName: Stub mapping ID
        description: The UUID of stub mapping

    put:
      description: Update an existing stub mapping
      body:
        application/json:
          example: !include examples/stub-mapping-no-id.example.json
          schema: stubMapping

      responses:
        200:
          body:
            application/json:
              schema: stubMapping
              example: !include examples/stub-mapping-with-id.example.json

    delete:
      description: Delete a stub mapping
      responses:
        200:
          body:
            application/json:
              example: !include examples/empty.example.json

  /save:
    description: Stub mappings
    post:
      description: Save all persistent stub mappings to the backing store
      responses:
        200:
          description: Successfully removed


/__admin/requests:
  description: Logged requests and responses received by the mock service

  get:
    description: Get received requests
    queryParameters:
      limit:
        displayName: Query limit
        description: The maximum number of results to return
        example: 10
      since:
        example: 2016-10-05T12:33:01Z
        displayName: Since date
        description: Only return logged requests after this date

    responses:
      200:
        body:
          application/json:
            example: !include examples/serve-events.example.json
  delete:
    description: Delete all received requests
    responses:
      200:
        description: Successfully deleted
        body:
          application/json:
            example: !include examples/empty.example.json


  /{requestId}:
    description: Single logged request
    get:
      responses:
        200:
          body:
            application/json:
              example: !include examples/request.example.json

                
    uriParameters:
      requestId:
        displayName: Request ID
        description: The UUID of the logged request
        required: true
        example: 12fb14bb-600e-4bfa-bd8d-be7f12562c99

  /reset:
    description: Request journal
    post:
      description: Empty the request journal
      responses:
        200:
          description: Successfully reset
          body:
            application/json:
              example: !include examples/empty.example.json


  /count:
    description: Request journal
    post:
      description: Count requests logged in the journal matching the specified criteria
      body:
        application/json:
          schema: requestPattern
          example: !include examples/request-pattern.example.json

      responses:
        200:
          description: Number of matching requests
          body:
            application/json:
              example: !include examples/request-count.example.json

  /find:
    post:
      description: Retrieve details of requests logged in the journal matching the specified criteria
      body:
        application/json:
          schema: requestPattern
          example: !include examples/request-pattern.example.json

      responses:
        200:
          description: Matching request details
          body:
            application/json:
              example: !include examples/requests.example.json


  /unmatched:
    get:
      description: Get details of logged requests that weren't matched by any stub mapping
      responses:
        200:
          description: Unmatched request details
          body:
            application/json:
              example: !include examples/requests.example.json


    /near-misses:
      get:
        description: Retrieve near-misses for all unmatched requests
        responses:
          200:
            description: Top 3 (at most) near misses for each unmatched request
            body:
              application/json:
                example: !include examples/near-misses.example.json

/__admin/recordings:
  description: Stub mapping record and snapshot functions

  /start:
    description: Start recording stub mappings
    post:
      description: Start recording stub mappings
      body:
        application/json:
          schema: recordSpec
          example: !include examples/record-spec.example.json

      responses:
        200:
          description: Successfully started recording

  /stop:
    description: Stop recording stub mappings
    post:
        description: Stop recording stub mappings
        responses:
          200:
            description: Successfully started recording
            body:
              application/json:
                schema: stubMappings
                example: !include examples/recorded-stub-mappings.example.json

  /status:
    description: Recording status
    get:
      description: Get the recording status (started or stopped)

      responses:
        200:
          description: Successfully got the record status
          body:
            application/json:
              example: |
                {
                  "status" : "Stopped"
                }

  /snapshot:
    description: Snapshot recording
    post:
      description: Take a snapshot recording
      body:
        application/json:
          schema: recordSpec
          example: !include examples/snapshot-spec.example.json

      responses:
          200:
            description: Successfully took a snapshot recording
            body:
              application/json:
                schema: stubMappings
                example: !include examples/recorded-stub-mappings.example.json

/__admin/scenarios:
  description: Scenarios support modelling of stateful behaviour

  get:
    description: Get all scenarios

    responses:
      200:
        description: All scenarios
        body:
          application/json:
            schema: scenarios
            example: !include examples/scenarios.example.json

  /reset:
    description: Scenarios
    post:
      description: Reset the state of all scenarios
      responses:
        200:
          description: Successfully reset
          body:
            application/json:
              example: !include examples/empty.example.json


/__admin/near-misses:
  description: Near misses allow querying of received requests or request patterns according to similarity

  /request:
    post:
      description: Find at most 3 near misses for closest stub mappings to the specified request
      body:
        application/json:
          example: !include examples/logged-request.example.json

      responses:
        200:
          description: Near misses matching criteria
          body:
            application/json:
              example: !include examples/near-misses.example.json

  /request-pattern:
    description: Near misses
    post:
      description: Find at most 3 near misses for closest logged requests to the specified request pattern
      body:
        application/json:
          schema: requestPattern
          example: !include examples/request-pattern.example.json

      responses:
        200:
          description: Near misses matching criteria
          body:
            application/json:
              example: !include examples/near-misses.example.json

/__admin/settings:
  description: Global settings
  post:
    description: Update global settings
    body:
      application/json:
        example: |
          {
              "fixedDelay": 500
          }

    responses:
      200:
        description: Settings successfully updated

/__admin/shutdown:
  description: Shutdown function
  post:
    description: Shutdown the WireMock server
    responses:
      200:
        description: Server will be shut down


